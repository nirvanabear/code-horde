{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Baskerville;\f1\fnil\fcharset0 Baskerville-Bold;\f2\fnil\fcharset0 AndaleMono;
\f3\fnil\fcharset0 AppleColorEmoji;\f4\fswiss\fcharset0 Helvetica;\f5\froman\fcharset0 Times-Roman;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue0;\red0\green0\blue233;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\csgray\c0\c0;\cssrgb\c0\c0\c93333;
}
\margl1440\margr1440\vieww13600\viewh7800\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs30 \cf2 \cb3 \
	\
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf2 \'a7 \ul Reverting a commit
\f0\b0 \ulnone \
	
\f2 git log --oneline
\f0 \
		\'ac List of commits\

\f2 		git log -1 --oneline\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0 \cf2 			\uc0\u9674  Shows commit currently checked out\
	
\f2 git checkout -f <commit hash>
\f0 \
		\'ac working directory will now match the state of this commit\
		\'ac staging area is also wiped out\
		\'ac commit first, if changes need to be saved\
		
\f2 git checkout -b <new branch name> <commit hash>\

\f0 			\uc0\u9674  a much better idea, which doesn\'92t wipe out the current working directory\
		\'ac Going to 
\f2 git checkout origin
\f0  will take you to most recent commit pushed to 
\f2 origin
\f0 \
			\uc0\u9674  which would also be in branch 
\f2 master\
	git show --oneline -s\

\f0 		\'ac Which commit is currently checked out\
	
\f2 git revert <unwanted commit hash>
\f0 \
		\'ac\'a0Creates a new commit, with Revert in the message\
		\'ac Reverts to the commit before that\
	\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf2 \'a7 \ul Other: reset and restore
\f0\b0 \ulnone \
	
\f2 git reset --hard
\f0 \
		\'ac Throws away all uncommitted changes in the working directory\
	
\f2 git restore --source
\f0 \
		\'ac Deletes and replaces specific file in working directory that was extracted from a previous commit\
\
\

\f1\b \'a7 \ul Pull
\f0\b0 \ulnone \
	\'95 Alternate method:\
		
\f2 git fetch origin master [opt: other branches]\
			
\f0 \uc0\u9674  this will fetch 
\f2 master
\f0  from the remote 
\f2 origin\
			
\f0 \uc0\u9674  a local copy will me named 
\f2 origin/master\
		git merge origin/master [opt: other branches]
\f0 \
			\uc0\u9674  merges into local 
\f2 master
\f0 \
		\'ac Including other branches then allows fetching and merging multiple branches all at once\
\

\f1\b \'a7 \ul Push
\f0\b0 \ulnone \
	
\f2 git push --set-upstream origin <branch in origin to be merged with>
\f0 \
		\'ac for the first time a new remote is being pushed to to enable tracking\
		
\f2 -u
\f0 	Same thing\
\
\

\f1\b \'a7 \ul Vocab
\f0\b0 \ulnone \
	Index == Staging area\
	Tree: a particular state of a working directory\
		Commit: represents that state in time\
	Head: points to latest commit in a branch\
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f3 \cf2 \uc0\u55357 \u56446 \u55357 \u56446 \u55357 \u56446 
\f0 \
\
\
\
\
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf2 \'a7 2.1 \ul Getting a Git Repository
\f0\b0 \ulnone \
	\'95 Getting a Git repository\
		\'ac Turn a local directory not under version control into a git repository\
		\'ac Clone one\
	
\f2 	git init
\f0 \
			\uc0\u9674  new subdirectory called 
\f2 .git
\f0  created\
		\'ac Begin tracking existing files in a directory\
			
\f2 git add *.c\
			git add LICENSE\
			git commit -m \'91Initial project version\'92
\f0 \
	\'95 Cloning an existing repository		\
		
\f2 git clone <url> <optional: new directory name>
\f0 \
			\uc0\u9674  Every version for every file for the history of the project is pulled down\
		\'ac Transfer protocols\
			
\f2 https://\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0 \cf2 				\'86 uses https protocol\
			
\f2 git://
\f0 \
				\'86 uses SSH transfer protocol\
\

\f3 \uc0\u55357 \u56446 \u55357 \u56446 \u55357 \u56446 
\f0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf2 \'a7 2.2 \ul Recording Changes to the Repository		
\f0\b0 \ulnone \
	\'95 Files have two states\
		\'ac Tracked\
		\'ac Untracked\
			\uc0\u9674  not in the last 
\f1\b snapshot
\f0\b0 \
			\uc0\u9674  not in your 
\f1\b staging area
\f0\b0 \
		
\f4\fs24 \cf0 \cb1 {{\NeXTGraphic Screen Shot 2020-06-28 at 12.11.12 AM.png \width13720 \height5860 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\f0\fs30 \cf2 \cb3 \
\
	\'95 Checking the Status of Your Files\
		
\f2 git status
\f0 \
			\uc0\u9674  
\f2 working directory clean
\f0 \
				\'86 No tracked files have been modified\
			\uc0\u9674  Untracked files will be mentioned\
				\'86 any files stored in the directory after being made into a repository\
	\'95 Tracking New Files\
		
\f2 git add <filename or directory>
\f0 \
			\uc0\u9674  Staged to be committed\
			\uc0\u9674  Staged files which are subsequently modified will only commit changes from the 
\f2 add
\f0  state\
		
\f2 git add .\
			
\f0 \uc0\u9674  adding everything in the working directory that\'92s new\
	\'95 Short Status\
		
\f2 -s
\f0  or 
\f2 --short
\f0 \
			
\f2 ??
\f0 	untracked\
			
\f2 A	
\f0 added\
			
\f2 M	
\f0 modified\
			\uc0\u9674  two columns\
				\'86 staging area status\
				\'86 working tree status\
					\'bb eg: 
\f2 MM
\f0  would show a file that has staged and unstaged changes\
	\'95\'a0Ignoring Files\
		
\f2 cat .gitignore
\f0 \
		
\f2 *.[oa]\
		*.~
\f0 \
			\uc0\u9674  eg: ignores files ending in .o or .a (object and archive files), or ~ (temporary files)\
		\'ac Suggestions on files to ignore\
			{\field{\*\fldinst{HYPERLINK "https://github.com/github/gitignore"}}{\fldrslt 
\f5\fs28 \cf4 \cb1 \expnd0\expndtw0\kerning0
\ul \ulc4 https://github.com/github/gitignor}}\
		\'ac Putting .gitignore in the root directory is applied to all subfolders\
	\'95 Viewing your Staged and Unstaged Changes\
		\'ac Results from using 
\f2 git diff
\f0 \
			\uc0\u9674  shows exact lines added or removed\
			\uc0\u9674  if all changes have been staged, 
\f2 git diff
\f0  will give no output\
		
\f2 git diff
\f0  \
			\uc0\u9674  Compares:\
				
\f1\b working directory
\f0\b0  \
				
\f1\b index
\f0\b0 \
		
\f2 git diff --staged
\f0  or 
\f2 --cashed
\f0 \
			\uc0\u9674  Compares:\
				
\f1\b index\
				HEAD
\f0\b0 \
		
\f2 git diff HEAD\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0 \cf2 			\uc0\u9674  Compares:\
				
\f1\b working directory\
				HEAD
\f0\b0 \
		\'ac Other options for using this command\
			
\f2 git difftool
\f0 \
				\'86 can view diffs in other software\
	\'95 Committing Your Changes\
		
\f2 git commit
\f0 \
			\uc0\u9674  Launches an editor, chosen in 
\f2 git config
\f0 \
				\'86 This is just a commit message, doesn\'92t actually modify what\'92s commited\
			\uc0\u9674  Abort by emptying the message completely\
		
\f2 -m \'93Your commit message here\'94\

\f0 			\uc0\u9674  Adds a commit message\
	\'95 Skipping the staging area\
		
\f2 -a
\f0 \
			\uc0\u9674  Automatically adds all tracked files to staging and commits\
	\'95 Removing Files\
		\'ac Must:\
			\uc0\u9674  remove from staging area\
			\uc0\u9674  remove from tracked files\
			\uc0\u9674  then commit\
		\'ac Just deleting a file marks it as \'93changes not staged for commit\'94\
		
\f2 git rm <filename>
\f0 \
			\uc0\u9674  Stages file removal for the next commit\
			\uc0\u9674  needs 
\f2 -f
\f0  if file was modified after last commit, or added to staging area\
		
\f2 --cashed
\f0 \
			\uc0\u9674  simply untracks file without removing it from directory\
			
\f2 git rm --cashed \\*.out
\f0 \
				\'86 eg: ignores C++ compiled files\
\
	\'95 Renaming files\
		
\f2 git mv <file1> <file2>\
			
\f0 \uc0\u9674  is equivalent to:\
				
\f2 mv <file1> <file2>\
				git rm <file1>\
				git add <file2>
\f0 \
\
\

\f3 \uc0\u55357 \u56446 \u55357 \u56446 \u55357 \u56446 
\f0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf2 \'a7 2.4 \ul Undoing Things
\f0\b0 \ulnone \
	\'95 Undoing a Commit\
		
\f2 git commit --amend
\f0 \
			\uc0\u9674  Replaces last commit with changes in the staging area\
			\uc0\u9674  Only a single commit will result\
	\'95 Unstaging a Staged File\
		
\f2 git reset HEAD <filename or directory>
\f0 \
	\'95 Unmodifying a Modified File\
		
\f2 git checkout -- <filename>
\f0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f3 \cf2 \uc0\u55357 \u56446 \u55357 \u56446 \u55357 \u56446 
\f0 \
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf2 \'a7 2.5 \ul Working with Remotes
\f0\b0 \ulnone \
	\'95 Showing remotes\
		
\f2 git remote
\f0 \
			\'ac Lists the shortnames of each remote\
			
\f2 origin
\f0 \
				\uc0\u9674  default name for the server you cloned from\
		
\f2 -v
\f0 \
			\'ac shows URLs\
	\'95 Adding Remote Repositories\
		\'ac Using the 
\f2 git clone
\f0  command implicitly adds 
\f2 origin
\f0  for you\
		
\f2 git remote add <shortname> <url>
\f0 \
			\uc0\u9674  shortname can now be used to reference that repository instead of the URL\
				eg: 
\f2 git fetch nickname
\f0 \
	\'95 Fetching and Pulling from Remotes\
		
\f2 git fetch <remote>
\f0 \
			\uc0\u9674  Pulls down all the data from that remote\
			\uc0\u9674  Doesn\'92t automatically merge with any of your work\
		
\f2 git pull
\f0 \
			\uc0\u9674  Fetches AND merges\
		
\f2 git push <remote> <branch>
\f0 \
			\uc0\u9674  Ready to share a project, push it upstream\
			
\f2 git push origin master
\f0 \
				\'86 Pushes your 
\f2 master
\f0  branch to your 
\f2 origin
\f0  server\
				\'86 Only works if:\
					\'bb You are cloned\
					\'bb No one else has pushed upstream before you\
						\'87 if they have, your push is rejected\
						\'87 you\'92ll have to fetch their work, and incorporate into yours before pushing\
	\'95 Inspecting a remote\
		
\f2 git remote show <remote>
\f0  \
			\uc0\u9674  lists URL, tracking branch info\
			\uc0\u9674  information on how 
\f2 git pull
\f0  executes\
			\uc0\u9674  which branches are automatically pushed to when 
\f2 git push
\f0  is run\
			\uc0\u9674  which branches on the server you don\'92t have yet:	 (
\f2 new
\f0 )\
	\'95 Renaming and Removing Remotes\
		
\f2 git remote rename <old name> <new name>	
\f0 \
		
\f2 git remote remove <name>
\f0 \
\
\
\
\
\
	\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
}